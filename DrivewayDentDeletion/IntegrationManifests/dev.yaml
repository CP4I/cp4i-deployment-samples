apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: dev-pipeline
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
  workspaces:
    - name: git-source
  tasks:
    - name: clone-git-source
      retries: 2
      taskRef:
        name: git-clone
        kind: ClusterTask
      params:
        - name: url
          value: "{{FORKED_REPO}}"
        - name: subdirectory
          value: ""
        - name: deleteExisting
          value: "true"
        - name: revision
          value: "{{BRANCH}}"
      workspaces:
        - name: output
          workspace: git-source

    # TODO Maybe this could be done as a pre-req rather than every pipeline run?
    - name: build-command-image
      retries: 2
      runAfter:
        - clone-git-source
      taskRef:
        name: build-task-no-pvc
      params:
        - name: imageTag
          value: "latest"
        - name: imageName
          value: "run-command"
        - name: dockerfile
          value: "CommonPipelineResources/Dockerfile"
        - name: contextPath
          value: "CommonPipelineResources"
      workspaces:
        - name: git-source
          workspace: git-source

    - name: deploy-im
      retries: 2
      runAfter:
        - clone-git-source
      taskRef:
        name: run-command
      workspaces:
        - name: git-source
          workspace: git-source
      params:
        - name: command
          value: |
            namespace=cp4i
            block_storage="cp4i-block-performance"
            file_storage="cp4i-file-performance-gid"
            im_name=ddd-dev
            qm_name=mq-ddd-qm-dev

            cat <<EOF | oc apply -f -
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: qm-${qm_name}-queues
            data:
              myqm.mqsc: |
                DEFINE QLOCAL('AccidentIn') DEFPSIST(YES) BOTHRESH(5) REPLACE
                DEFINE QLOCAL('AccidentOut') DEFPSIST(YES) BOTHRESH(5) REPLACE
                DEFINE QLOCAL('BumperIn') DEFPSIST(YES) BOTHRESH(5) REPLACE
                DEFINE QLOCAL('BumperOut') DEFPSIST(YES) BOTHRESH(5) REPLACE
                DEFINE QLOCAL('CrumpledIn') DEFPSIST(YES) BOTHRESH(5) REPLACE
                DEFINE QLOCAL('CrumpledOut') DEFPSIST(YES) BOTHRESH(5) REPLACE
                SET AUTHREC PROFILE('AccidentIn') PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(BROWSE,GET,INQ,PUT)
                SET AUTHREC PROFILE('AccidentOut') PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(BROWSE,GET,INQ,PUT)
                SET AUTHREC PROFILE('BumperIn') PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(BROWSE,GET,INQ,PUT)
                SET AUTHREC PROFILE('BumperOut') PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(BROWSE,GET,INQ,PUT)
                SET AUTHREC PROFILE('CrumpledIn') PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(BROWSE,GET,INQ,PUT)
                SET AUTHREC PROFILE('CrumpledOut') PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(BROWSE,GET,INQ,PUT)
                REFRESH SECURITY
                ALTER QMGR DEADQ(SYSTEM.DEAD.LETTER.QUEUE)
            ---
            apiVersion: cert-manager.io/v1
            kind: Certificate
            metadata:
              name: qm-${qm_name}-client
            spec:
              commonName: ${namespace}.${im_name}
              subject:
                organizationalUnits:
                - my-team
              secretName: qm-${qm_name}-client
              issuerRef:
                name: qm-${qm_name}-server
                kind: Issuer
                group: cert-manager.io
            ---
            apiVersion: integration.ibm.com/v1beta1
            kind: IntegrationManifest
            metadata:
              name: ${im_name}
            spec:
              version: 2022.4.1
              license:
                accept: true
                license: Q4-license
                use: CloudPakForIntegrationNonProduction
              storage:
                readWriteOnce:
                  class: ${block_storage}
                readWriteMany:
                  class: ${file_storage}
              managedInstances:
                list:
                - kind: QueueManager
                  metadata:
                    name: ${qm_name}
                  spec:
                    web:
                      enabled: true
                    queueManager:
                      mqsc:
                        - configMap:
                            name: qm-${qm_name}-default
                            items:
                              - myqm.mqsc
                        - configMap:
                            name: qm-${qm_name}-queues
                            items:
                              - myqm.mqsc
            EOF

    - name: create-is-config
      retries: 2
      runAfter:
        - deploy-im
      taskRef:
        name: run-command
      workspaces:
        - name: git-source
          workspace: git-source
      params:
        - name: command
          value: |
            /workspace/git-source/products/bash/create-ace-mq-configuration.sh -n cp4i -c qm-mq-ddd-qm-dev-client -o application-ddd-dev

    - name: wait-for-mq
      retries: 2
      runAfter:
        - deploy-im
      taskRef:
        name: run-command
      workspaces:
        - name: git-source
          workspace: git-source
      params:
        - name: command
          value: |
            namespace=cp4i


    #
    # # build all ace in dev namespace
    # - name: build-ace-int-server-ace-api
    #   retries: 2
    #   runAfter:
    #     - clone-git-source
    #   taskRef:
    #     name: build-task
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ddd-ace-api"
    #     - name: dockerfile
    #       value: "ACE-API.Dockerfile"
    #     - name: contextPath
    #       value: "Bar_files/ace-api"
    #     - name: pvc
    #       value: "buildah-ace-api"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source
    #
    # - name: build-ace-int-server-ace-acme
    #   retries: 2
    #   runAfter:
    #     - clone-git-source
    #   taskRef:
    #     name: build-task
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ddd-ace-acme"
    #     - name: dockerfile
    #       value: "ACE-Acme.Dockerfile"
    #     - name: contextPath
    #       value: "Bar_files/ace-acme"
    #     - name: pvc
    #       value: "buildah-ace-acme"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source
    #
    # - name: build-ace-int-server-ace-bernie
    #   retries: 2
    #   runAfter:
    #     - clone-git-source
    #   taskRef:
    #     name: build-task
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ddd-ace-bernie"
    #     - name: dockerfile
    #       value: "ACE-Bernie.Dockerfile"
    #     - name: contextPath
    #       value: "Bar_files/ace-bernie"
    #     - name: pvc
    #       value: "buildah-ace-bernie"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source
    #
    # - name: build-ace-int-server-ace-chris
    #   retries: 2
    #   runAfter:
    #     - clone-git-source
    #   taskRef:
    #     name: build-task
    #   params:
    #     - name: imageTag
    #       value: "$(params.imageTag)"
    #     - name: imageName
    #       value: "ddd-ace-chris"
    #     - name: dockerfile
    #       value: "ACE-Chris.Dockerfile"
    #     - name: contextPath
    #       value: "Bar_files/ace-chris"
    #     - name: pvc
    #       value: "buildah-ace-chris"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source

    # TODO Avoid deploying anything via the pipeline just yet, until we've got it working outside the pipeline

    # # deploy all ace in dev namespace
    # - name: deploy-wait-ace-api
    #   retries: 2
    #   runAfter:
    #     - build-ace-int-server-ace-api
    #   taskRef:
    #     name: run-script
    #   params:
    #     - name: script
    #       value: "products/bash/release-ace-integration-server.sh"
    #     - name: params
    #       # For Dev deploy with tracing enabled and no HA
    #       value: "-n {{NAMESPACE}} -a false -r ddd-dev-ace-api -i image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/ddd-ace-api:$(params.imageTag) {{TRACING}} -d policyproject-ddd-dev"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source
    #
    # - name: deploy-wait-ace-bernie
    #   retries: 2
    #   runAfter:
    #     - build-ace-int-server-ace-bernie
    #   taskRef:
    #     name: run-script
    #   params:
    #     - name: script
    #       value: "products/bash/release-ace-integration-server.sh"
    #     - name: params
    #       # For Dev deploy with tracing enabled and no HA
    #       value: "-n {{NAMESPACE}} -a false -r ddd-dev-ace-bernie -i image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/ddd-ace-bernie:$(params.imageTag) {{TRACING}} -d policyproject-ddd-dev"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source
    #
    # - name: deploy-wait-ace-acme
    #   retries: 2
    #   runAfter:
    #     - build-ace-int-server-ace-acme
    #   taskRef:
    #     name: run-script
    #   params:
    #     - name: script
    #       value: "products/bash/release-ace-integration-server.sh"
    #     - name: params
    #       # For Dev deploy with tracing enabled and no HA
    #       value: "-n {{NAMESPACE}} -a false -r ddd-dev-ace-acme -i image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/ddd-ace-acme:$(params.imageTag) {{TRACING}} -d policyproject-ddd-dev"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source
    #
    # - name: deploy-wait-ace-chris
    #   retries: 2
    #   runAfter:
    #     - build-ace-int-server-ace-chris
    #   taskRef:
    #     name: run-script
    #   params:
    #     - name: script
    #       value: "products/bash/release-ace-integration-server.sh"
    #     - name: params
    #       # For Dev deploy with tracing enabled and no HA
    #       value: "-n {{NAMESPACE}} -a false -r ddd-dev-ace-chris -i image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/ddd-ace-chris:$(params.imageTag) {{TRACING}} -d policyproject-ddd-dev"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source
    #
    # # test end-to-end API in dev namespace
    # - name: test-e2e-api-in-dev-namespace
    #   retries: 2
    #   runAfter:
    #     - deploy-wait-ace-chris
    #     - deploy-wait-mq
    #     - deploy-wait-ace-api
    #     - deploy-wait-ace-acme
    #     - deploy-wait-ace-bernie
    #   taskRef:
    #     name: api-test-e2e
    #   params:
    #     - name: suffix
    #       value: "ddd"
    #     - name: dddType
    #       value: "dev"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: dev-event-listener
spec:
  serviceAccountName: pipeline
  triggers:
    - template:
        ref: dev-triggertemplate

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app.kubernetes.io/managed-by: EventListener
    app.kubernetes.io/part-of: Triggers
    eventlistener: dev-event-listener
  name: el-main-trigger-route
spec:
  host: ""
  port:
    targetPort: http-listener
  to:
    kind: Service
    name: el-dev-event-listener
    weight: null
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: dev-triggertemplate
spec:
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        name: dev-pipelinerun-$(uid)
      spec:
        pipelineRef:
          name: dev-pipeline
        serviceAccountName: pipeline
        workspaces:
          - name: git-source
            persistentvolumeclaim:
              claimName: git-source-workspace
        params:
          - name: imageTag
            value: $(uid)
        timeout: "20m"
