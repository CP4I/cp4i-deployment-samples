apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: dev-pipeline
spec:
  params:
    - name: imageTag
      type: string
      description: The image tag
  workspaces:
    - name: git-source
  tasks:
    - name: clone-git-source
      retries: 2
      taskRef:
        name: git-clone
        kind: ClusterTask
      params:
        - name: url
          value: "{{FORKED_REPO}}"
        - name: subdirectory
          value: ""
        - name: deleteExisting
          value: "true"
        - name: revision
          value: "{{BRANCH}}"
      workspaces:
        - name: output
          workspace: git-source

    - name: fixup-dockerfiles
      retries: 2
      runAfter:
        - clone-git-source
      taskRef:
        name: run-command
      params:
        - name: command
          value: |
            ls /workspace
            ls /workspace/git-source
            /workspace/git-source/products/bash/fixup-dockerfiles.sh -n $(context.taskRun.namespace)
      workspaces:
        - name: git-source
          workspace: git-source

    # TODO Should no longer need this
    # # MQ build in dev namespace
    # - name: build-mq
    #   retries: 2
    #   runAfter:
    #     - fixup-dockerfiles
    #   taskRef:
    #     name: build-task
    #   params:
    #     - name: imageName
    #       value: "mq-ddd"
    #     - name: imageTag
    #       value: "latest"
    #     - name: dockerfile
    #       value: "MQ.Dockerfile"
    #     - name: contextPath
    #       value: ""
    #     - name: pvc
    #       value: "buildah-mq"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source

    # TODO Deploy using IM
    # # MQ deploy in dev namesapce
    # - name: deploy-wait-mq
    #   retries: 2
    #   runAfter:
    #     - build-mq
    #   taskRef:
    #     name: run-script
    #   params:
    #     - name: script
    #       value: "products/bash/release-mq.sh"
    #     - name: params
    #       # For Dev deploy with tracing enabled and no HA
    #       value: " -n {{NAMESPACE}} -a false -b {{DEFAULT_BLOCK_STORAGE}} -r mq-ddd-qm-dev -i image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/mq-ddd:latest {{TRACING}}"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source

    # build all ace in dev namespace
    - name: build-ace-int-server-ace-api
      retries: 2
      runAfter:
        - fixup-dockerfiles
      taskRef:
        name: build-task
      params:
        - name: imageTag
          value: "$(params.imageTag)"
        - name: imageName
          value: "ddd-ace-api"
        - name: dockerfile
          value: "ACE-API.Dockerfile"
        - name: contextPath
          value: "Bar_files/ace-api"
        - name: pvc
          value: "buildah-ace-api"
      workspaces:
        - name: git-source
          workspace: git-source

    - name: build-ace-int-server-ace-acme
      retries: 2
      runAfter:
        - fixup-dockerfiles
      taskRef:
        name: build-task
      params:
        - name: imageTag
          value: "$(params.imageTag)"
        - name: imageName
          value: "ddd-ace-acme"
        - name: dockerfile
          value: "ACE-Acme.Dockerfile"
        - name: contextPath
          value: "Bar_files/ace-acme"
        - name: pvc
          value: "buildah-ace-acme"
      workspaces:
        - name: git-source
          workspace: git-source

    - name: build-ace-int-server-ace-bernie
      retries: 2
      runAfter:
        - fixup-dockerfiles
      taskRef:
        name: build-task
      params:
        - name: imageTag
          value: "$(params.imageTag)"
        - name: imageName
          value: "ddd-ace-bernie"
        - name: dockerfile
          value: "ACE-Bernie.Dockerfile"
        - name: contextPath
          value: "Bar_files/ace-bernie"
        - name: pvc
          value: "buildah-ace-bernie"
      workspaces:
        - name: git-source
          workspace: git-source

    - name: build-ace-int-server-ace-chris
      retries: 2
      runAfter:
        - fixup-dockerfiles
      taskRef:
        name: build-task
      params:
        - name: imageTag
          value: "$(params.imageTag)"
        - name: imageName
          value: "ddd-ace-chris"
        - name: dockerfile
          value: "ACE-Chris.Dockerfile"
        - name: contextPath
          value: "Bar_files/ace-chris"
        - name: pvc
          value: "buildah-ace-chris"
      workspaces:
        - name: git-source
          workspace: git-source

    # TODO Avoid deploying anything via the pipeline just yet, until we've got it working outside the pipeline

    # # deploy all ace in dev namespace
    # - name: deploy-wait-ace-api
    #   retries: 2
    #   runAfter:
    #     - build-ace-int-server-ace-api
    #   taskRef:
    #     name: run-script
    #   params:
    #     - name: script
    #       value: "products/bash/release-ace-integration-server.sh"
    #     - name: params
    #       # For Dev deploy with tracing enabled and no HA
    #       value: "-n {{NAMESPACE}} -a false -r ddd-dev-ace-api -i image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/ddd-ace-api:$(params.imageTag) {{TRACING}} -d policyproject-ddd-dev"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source
    #
    # - name: deploy-wait-ace-bernie
    #   retries: 2
    #   runAfter:
    #     - build-ace-int-server-ace-bernie
    #   taskRef:
    #     name: run-script
    #   params:
    #     - name: script
    #       value: "products/bash/release-ace-integration-server.sh"
    #     - name: params
    #       # For Dev deploy with tracing enabled and no HA
    #       value: "-n {{NAMESPACE}} -a false -r ddd-dev-ace-bernie -i image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/ddd-ace-bernie:$(params.imageTag) {{TRACING}} -d policyproject-ddd-dev"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source
    #
    # - name: deploy-wait-ace-acme
    #   retries: 2
    #   runAfter:
    #     - build-ace-int-server-ace-acme
    #   taskRef:
    #     name: run-script
    #   params:
    #     - name: script
    #       value: "products/bash/release-ace-integration-server.sh"
    #     - name: params
    #       # For Dev deploy with tracing enabled and no HA
    #       value: "-n {{NAMESPACE}} -a false -r ddd-dev-ace-acme -i image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/ddd-ace-acme:$(params.imageTag) {{TRACING}} -d policyproject-ddd-dev"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source
    #
    # - name: deploy-wait-ace-chris
    #   retries: 2
    #   runAfter:
    #     - build-ace-int-server-ace-chris
    #   taskRef:
    #     name: run-script
    #   params:
    #     - name: script
    #       value: "products/bash/release-ace-integration-server.sh"
    #     - name: params
    #       # For Dev deploy with tracing enabled and no HA
    #       value: "-n {{NAMESPACE}} -a false -r ddd-dev-ace-chris -i image-registry.openshift-image-registry.svc:5000/{{NAMESPACE}}/ddd-ace-chris:$(params.imageTag) {{TRACING}} -d policyproject-ddd-dev"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source
    #
    # # test end-to-end API in dev namespace
    # - name: test-e2e-api-in-dev-namespace
    #   retries: 2
    #   runAfter:
    #     - deploy-wait-ace-chris
    #     - deploy-wait-mq
    #     - deploy-wait-ace-api
    #     - deploy-wait-ace-acme
    #     - deploy-wait-ace-bernie
    #   taskRef:
    #     name: api-test-e2e
    #   params:
    #     - name: suffix
    #       value: "ddd"
    #     - name: dddType
    #       value: "dev"
    #   workspaces:
    #     - name: git-source
    #       workspace: git-source
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: dev-event-listener
spec:
  serviceAccountName: pipeline
  triggers:
    - template:
        ref: dev-triggertemplate

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app.kubernetes.io/managed-by: EventListener
    app.kubernetes.io/part-of: Triggers
    eventlistener: dev-event-listener
  name: el-main-trigger-route
spec:
  host: ""
  port:
    targetPort: http-listener
  to:
    kind: Service
    name: el-dev-event-listener
    weight: null
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: dev-triggertemplate
spec:
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        name: dev-pipelinerun-$(uid)
      spec:
        pipelineRef:
          name: dev-pipeline
        serviceAccountName: pipeline
        workspaces:
          - name: git-source
            persistentvolumeclaim:
              claimName: git-source-workspace
        params:
          - name: imageTag
            value: $(uid)
        timeout: "20m"
